#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  karel
#
#  Copyright 2012 Developingo <a.wonderful.code@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#

"""
Controlador principal de Karel el Robot
"""

import os
import sys
from os import listdir
from time import time
import json
from pprint import pprint

def karel_init():
    """Provee acceso a los modulos de Karel"""
    # Try to detect where it is run from and set prefix and the search path.
    # It is assumed that the user installed Cola using the --prefix= option
    prefix = os.path.dirname(os.path.dirname(
        os.path.realpath(os.path.abspath(__file__))))

    # Look for modules in the source or install trees
    cola_mod = os.path.join(prefix, 'karel', '__init__.py')
    if os.path.exists(cola_mod):
        # Source tree
        sys.path.insert(1, prefix)
    else:
        # Install tree
        install_lib = os.path.join(prefix, 'share', 'karel', 'lib')
        sys.path.insert(1, install_lib)

if __name__ == '__main__':
    karel_init()#Inicializamos las rutas

    from karel.util import info
    from karel.kgrammar import kgrammar
    from karel.krunner import krunner
    from karel.kworld import kworld
    from karel.kutil import KarelException

    if len(sys.argv) == 1:
        print info.cmd_help
    else:
        if '--version' in sys.argv:
            print """Karel %.2f (built: %s)
Copyright (c) 2012 Developingo
"""%(info.VERSION, info.BUILD_DATE)
        elif '--help' in sys.argv:
            print info.cmd_help
        elif 'help' in sys.argv:
            try:
                comando = sys.argv[sys.argv.index('help')+1]
                print info.ayuda(comando)
            except:
                print info.cmd_help
        elif 'check_all' in sys.argv:
            #Opcion para checar la sintaxis de una carpeta llena de
            #archivos de Karel
            if '-d' in sys.argv:
                try:
                    carpeta = sys.argv[sys.argv.index('-d')+1]
                    archivos = listdir(carpeta)
                    err_count = 0
                    file_count = 0
                    t_inicio = time()
                    for arch in archivos:
                        if arch.endswith(".txt") or arch.endswith(".karel"):
                            file_count += 1
                            grammar = kgrammar(flujo=open(carpeta+arch), archivo=arch, debug=False, futuro='--future' in sys.argv)
                            try:
                                grammar.verificar_sintaxis()
                            except KarelException, ke:
                                print "El archivo %s tiene errores:"%arch
                                print "\t", ke[0], "en la linea", grammar.tokenizador.lineno
                                err_count += 1
                    t_fin = time()
                    if err_count == 0:
                        print "Todos los archivos estan correctos"
                    else:
                        print "Se encontraron", err_count, "errores"
                    print "Me tarde", int((t_fin-t_inicio)*1000), "milisegundos en analizar", file_count, "archivos"
                except IndexError:
                    print "Falta el nombre de una carpeta despues de '-d'"
                except OSError:
                    print "No existe la carpeta '%s'"%carpeta
            else:
                print info.ayuda('check_all')
                print "No se proporciono ninguna carpeta..."
        elif 'run' in sys.argv:
            if '-k' in sys.argv:
                try:
                    if '-m' in sys.argv:
                        archivomundo = sys.argv[sys.argv.index('-m')+1]
                        mun = kworld(archivo=file(archivomundo))
                    else:
                        mun = kworld()
                    arch = sys.argv[sys.argv.index('-k')+1]
                    runner = None
                    grammar = kgrammar(flujo=open(arch), archivo=arch, debug=False, futuro='--future' in sys.argv)
                    try:
                        grammar.verificar_sintaxis(gen_arbol=True) #Pedimos que genere el arbol de instrucciones
                    except KarelException, ke:
                        print "El archivo %s tiene errores:"%arch
                        print "\t", ke[0], "en la linea", grammar.tokenizador.lineno
                    else:
                        runner = krunner(grammar.arbol, mundo=mun)
                        t_inicio = time()
                        runner.run()
                        t_fin = time()
                        print runner.estado, runner.mensaje
                        print "Me tarde", int((t_fin-t_inicio)*1000), "milisegundos en ejecutar el archivo"
                        if '--dump' in sys.argv:
                            #Hay que brincar el mundo
                            pprint(runner.mundo.mundo)
                except IndexError:
                    print "Falta el nombre de un archivo despues de '-k' o '-m'"
                except OSError:
                    print "No existe el archivo '%s'"%arch
                except IOError:
                    print "No existe el archivo '%s'"%archivomundo
                #except ValueError:
                    #print "El mundo '%s' no es un archivo de mundo valido"%archivomundo
            else:
                print info.ayuda('run')
                print "No se proporciono ningun archivo..."
        elif 'check' in sys.argv:
            #Verifica la sintaxis de un archivo .karel
            if '-k' in sys.argv:
                try:
                    arch = sys.argv[sys.argv.index('-k')+1]
                    t_inicio = time()

                    grammar = kgrammar(flujo=open(arch), archivo=arch, debug=False, futuro='--future' in sys.argv)
                    try:
                        grammar.verificar_sintaxis()
                    except KarelException, ke:
                        print "El archivo %s tiene errores:"%arch
                        print "\t", ke[0], "en la linea", grammar.tokenizador.lineno
                    else:
                        print "Sintaxis verificada, todo bien"

                    t_fin = time()
                    print "Me tarde", int((t_fin-t_inicio)*1000), "milisegundos en analizar el archivo"
                except IndexError:
                    print "Falta el nombre de un archivo despues de '-k'"
                except OSError:
                    print "No existe el archivo '%s'"%arch
            else:
                print info.ayuda('check')
                print "No se proporciono ningun archivo..."
        elif 'test' in sys.argv:
            if '-k' in sys.argv and '-m' in sys.argv:
                try:
                    archivomundo = sys.argv[sys.argv.index('-m')+1]
                    f = file(archivomundo)
                    kec = json.load(f) #Tenemos el archivo de condiciones de evaluacion cargado.
                    arch = sys.argv[sys.argv.index('-k')+1]
                    grammar = kgrammar(flujo=open(arch), archivo=arch, debug=False, futuro='--future' in sys.argv)
                    try:
                        grammar.verificar_sintaxis(gen_arbol=True) #Pedimos que genere el arbol de instrucciones
                    except KarelException, ke:
                        print "El archivo %s tiene errores:"%arch
                        print "\t", ke[0], "en la linea", grammar.tokenizador.lineno
                    else:
                        t_inicio = time()
                        puntaje = 0
                        num_caso = 0
                        suma_puntos = 0
                        for caso in kec['casos']:
                            num_caso += 1
                            #pprint(caso['mundo'])
                            mun = kworld(filas=caso['mundo']['dimensiones']['filas'], columnas=caso['mundo']['dimensiones']['columnas'], karel_pos=tuple(caso['mundo']['karel']['posicion']), orientacion=caso['mundo']['karel']['orientacion'], mochila=caso['mundo']['karel']['mochila'])
                            mun.carga_casillas(caso['mundo']['casillas'])
                            runner = krunner(grammar.arbol, mundo=mun)
                            runner.run()
                            if runner.estado == 'OK':
                                puntaje += caso['puntaje']
                            #TODO verificar tambien el estado final de los casos
                            suma_puntos += caso['puntaje']
                            print 'caso', num_caso, runner.estado, runner.mensaje, caso['puntaje'], 'puntos'
                        t_fin = time()
                        print 'puntaje:', puntaje, '/', suma_puntos
                        print 'efectividad:', puntaje/float(suma_puntos)
                        print "Me tarde", int((t_fin-t_inicio)*1000), "milisegundos en ejecutar el archivo"
                except IndexError:
                    print "Falta el nombre de un archivo despues de '-k' o '-m'"
                except OSError:
                    print "No existe el archivo '%s'"%arch
                except IOError:
                    print "No existe el archivo '%s'"%archivomundo
                except ValueError:
                    print "El mundo '%s' no es un archivo de mundo valido"%archivomundo
            else:
                print info.ayuda('run')
                print "No se proporciono ningun archivo..."
        else:
            import karel.wx.kwindow
            Karel = karel.wx.kwindow.KarelWindow(0)
            Karel.MainLoop()
