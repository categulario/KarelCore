{"tagline":"Karel el robot, reescrito y tuneado completamente en python","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-17396954-12","name":"PyRel","body":"PyRel\r\n=====\r\n\r\nXalapa, Ver. 2012\r\n\r\nDescripción\r\n-----------\r\n\r\nTe gustaba tanto jugar con Karel que decidiste que lo querías en tu plataforma favorita: Linux, así que programaste como poseído en python hasta lograr que Karel corra en Linux, Windows, Mac, Solaris y cualquier otra bestia...\r\n\r\nProblema\r\n--------\r\n\r\nKarel requiere algunas librerías privativas para correr, escribe un programa que no las requiera, y que permita ejecutar códigos de Karel en un mundo.\r\n\r\nConsideraciones\r\n---------------\r\n\r\n* Karel necesita recursión para poder resolver problemas.\r\n* Las estructuras se heredan del lenguaje en que es programado.\r\n* Karel se lleva muy bien con los pingüinos.\r\n* Un autómata finito o máquina de estado finito es un modelo computacional que realiza cómputos en forma automática sobre una entrada para producir una salida.\r\n* No importa la posición ni orientación final de Karel.\r\n* Solo tienes el verano para hacerlo.\r\n\r\nProyecto\r\n--------\r\n\r\nKarel el robot, escrito completamente en python. Por [@Categulario](https://twitter.com/categulario)\r\n\r\nEl objetivo de este proyecto es ofrecer el lenguaje ''Karel'' orientado al aprendizaje de la programación para todas las plataformas y sin requerir librerías privativas.\r\n\r\nHasta el momento sólo está soportada la sintaxis 'pascal' de Karel, algunos cambios en la sintaxis pueden haber sido influenciados por la sintaxis de Python, sin embargo cualquier código en la sintaxis original de Karel será reconocido (Excepto por los códigos con comentarios de una sola línea con `//`).\r\n\r\nNecesito ayuda!\r\n---------------\r\n\r\nSi conoces Karel el robot y tienes códigos escritos en PASCAL (el pascal de Karel) puedes hacer dos cosas por mi:\r\n\r\n* Probar que los codigos sean correctamente reconocidos por el analizador sintáctico.\r\n* Hecho lo anterior, poner un error de sintaxis en los códigos y ver si el analizador lo reconoce.\r\n\r\nCualquier irregularidad me avisan a a.wonderful.code@gmail.com, información sobre cómo verificar la sintaxis de los archivos está abajo.\r\n\r\nTesting\r\n-------\r\n\r\nPara probar alguno de los componentes hay que ejecutar el archivo `karel` en la carpeta raiz.\r\n\r\nEjemplo:\r\n\r\n`$ python karel check -k archivo.karel`\r\n\r\nO también\r\n\r\n`$ python karel run -k archivo.karel`\r\n\r\nEs posible obtener una poca de ayuda con:\r\n\r\n`$ python karel --help`\r\n\r\nTODO\r\n----\r\n\r\nCosas importantes por hacer:\r\n\r\n* Asegurar el buen funcionamiento de `sal-de-instruccion` y de `apagate` en `krunner` y `kgrammar`.\r\n* Ajustar `ktokenizer.py` para agrupar símbolos como '++', '--', '&&', '||', '==', '//', '/\\*', '\\*/' etc...\r\n* Implementar la ejecucion paso a paso o step_run.\r\n* Implementar la GUI del IDE.\r\n* Hacer un editor de mundos.\r\n* Soportar la sintaxis Java de pascal.\r\n* Extender la ayuda.\r\n\r\nAlgunas buenas ideas por implementar en este proyecto:\r\n\r\n* Poner una sección con un tutorial de Karel a modo de 'misiones'.\r\n\r\nNotas\r\n-----\r\n\r\n* Añadí (para evitar conflictos y confusiones frecuentes) soporte para 'repetir' y 'repite' como bucles, ambos con la misma funcionalidad. Cualquier comentario me avisan. (Cuando competí en la OMI no saben cuánta lata me dio esto :) )\r\n* Trato de hacer los mensajes de error lo más comprensibles posible, se aceptan comentarios.\r\n* Se pueden hacer comentarios en una línea usando `#`, los comentarios de varias lineas se hacen con `/`, `\"` y `'`.\r\n* Los procedimientos tienen soporte para varias variables, quién sabe, con suerte esto abre las puertas a mas problemas.\r\n* También en un delirio de locura podría incluir las variables `verdadero` y `falso`, actualmente ya son palabras reservadas.\r\n* Se usará Scintilla para el editor de código y pygame para el visor del mundo, la interfaz correrá por cuenta de wxPython.\r\n* Provisionalmente estoy usando JSON para el almacenamiento de los mundos, es la magia de los diccionarios en python.\r\n* Se implementó la instruccion `sal-de-bucle` que rompe un ciclo, equivalente al `break` en otros lenguajes, para usarse en conjunto con las condiciones `verdadero` y `falso`.\r\n* En `kgrammar.py` hay una directiva llamada `futuro` en el constructor, que activa las palabras `verdadero`, `falso` y `sal-de-instruccion`.\r\n\r\nTodo el desarrollo del proyecto se llevó a cabo en Debian Wheezy, Ubuntu 12.04 y OpenSUSE usando el IDE Geany Tavira. Otras herramientas incluyen Git como sistema de control de versiones, Git-cola como interfaz para Git, y la magia del escritorio Gnome shell!!\r\n\r\n"}